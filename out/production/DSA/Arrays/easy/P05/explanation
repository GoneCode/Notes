The **Best Time to Buy and Sell Stock II** problem is a variation of the stock trading problem where you are allowed to make **multiple transactions** (buy and sell). Let's dive into the problem step by step.

---

### **Problem Description**
You are given an integer array `prices` where `prices[i]` is the price of a given stock on the `i`-th day.

**Goal**: Maximize your profit by completing as many transactions as you like (buy one and sell one share of the stock multiple times).

**Rules**:
1. You must sell the stock before buying it again.
2. You cannot hold more than one stock at a time.

---

### **Examples**

#### Example 1:
```plaintext
Input: prices = [7, 1, 5, 3, 6, 4]
Output: 7
Explanation:
- Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5 - 1 = 4.
- Buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6 - 3 = 3.
Total profit = 4 + 3 = 7.
```

#### Example 2:
```plaintext
Input: prices = [1, 2, 3, 4, 5]
Output: 4
Explanation:
- Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5 - 1 = 4.
Note: You can sell on each day for the same result.
```

#### Example 3:
```plaintext
Input: prices = [7, 6, 4, 3, 1]
Output: 0
Explanation:
- No transactions are possible because the prices are in decreasing order.
```

---

### **Approach 1: Greedy Algorithm (Optimal Solution)**

#### Idea:
- To maximize profit, we should capture all upward price trends.
- Buy when the price goes up and sell as soon as it peaks.

#### Steps:
1. Traverse the `prices` array.
2. If the price of the current day (`prices[i]`) is less than the price of the next day (`prices[i+1]`), add the difference (`prices[i+1] - prices[i]`) to the total profit.
3. Continue until the end of the array.

#### Code:
```java
public int maxProfit(int[] prices) {
    int profit = 0;

    for (int i = 0; i < prices.length - 1; i++) {
        if (prices[i] < prices[i + 1]) {
            profit += prices[i + 1] - prices[i];
        }
    }

    return profit;
}
```

#### Explanation:
- If `prices = [7, 1, 5, 3, 6, 4]`:
  - Day 1 to Day 2: No profit (price goes down).
  - Day 2 to Day 3: Buy at 1, sell at 5, profit = 4.
  - Day 3 to Day 4: No profit (price goes down).
  - Day 4 to Day 5: Buy at 3, sell at 6, profit = 3.
  - Total profit = 4 + 3 = 7.

#### Time Complexity:
- **O(n)**: Single traversal of the array.
- Space Complexity: **O(1)**: No extra space used.

---

### **Approach 2: Valley-Peak Approach**

#### Idea:
- Identify "valleys" (local minima) as the buy points and "peaks" (local maxima) as the sell points.

#### Steps:
1. Traverse the `prices` array and find all valleys and peaks.
2. Add the differences between valleys and subsequent peaks to the total profit.

#### Code:
```java
public int maxProfit(int[] prices) {
    int i = 0;
    int profit = 0;
    int n = prices.length;

    while (i < n - 1) {
        // Find the valley (local minima)
        while (i < n - 1 && prices[i] >= prices[i + 1]) {
            i++;
        }
        int valley = prices[i];

        // Find the peak (local maxima)
        while (i < n - 1 && prices[i] <= prices[i + 1]) {
            i++;
        }
        int peak = prices[i];

        // Add the profit
        profit += peak - valley;
    }

    return profit;
}
```

#### Explanation:
- If `prices = [7, 1, 5, 3, 6, 4]`:
  - Valley at 1, peak at 5: profit = 5 - 1 = 4.
  - Valley at 3, peak at 6: profit = 6 - 3 = 3.
  - Total profit = 4 + 3 = 7.

#### Time Complexity:
- **O(n)**: Single traversal of the array.
- Space Complexity: **O(1)**.

---

### **Key Insights**
1. The greedy approach is sufficient because profit only depends on upward trends. Capturing these trends directly gives the maximum result.
2. If prices are in a strictly increasing order, sell on the last day.
3. If prices are in a strictly decreasing order, no transactions are possible.

---

### **Edge Cases**
1. **Empty Array**:
   - Input: `prices = []`
   - Output: `0`

2. **Single Element**:
   - Input: `prices = [1]`
   - Output: `0`

3. **Flat Prices**:
   - Input: `prices = [3, 3, 3]`
   - Output: `0`

Would you like help with variations of this problem or debugging?