The **Linear Search Algorithm** is the simplest way to search for an element in a list or array. Here's how it works, step by step:

---

### **Steps**:
1. Start at the first element of the list.
2. Compare the target value (the element you're searching for) with the current element.
3. If the current element matches the target value:
   - Stop and return the position (index) of the element.
4. If the current element does not match:
   - Move to the next element.
5. Repeat steps 2–4 until:
   - You find the target, or
   - You reach the end of the list.
6. If the target is not found, return "not found" or -1 (depending on implementation).

---

### **Key Points**:
- **Use Case**: Works for both sorted and unsorted lists.
- **Time Complexity**:
  - Best case: \( O(1) \) (if the target is the first element).
  - Worst case: \( O(n) \) (if the target is at the end or not present).
- **Space Complexity**: \( O(1) \) (requires no extra memory).

---

### **Example**:
Let's search for the number **7** in the list: `[3, 5, 7, 9, 11]`.

1. Compare **3** (first element) with **7** → Not a match.
2. Compare **5** (second element) with **7** → Not a match.
3. Compare **7** (third element) with **7** → Match found!
4. Return the index: **2** (if index starts at 0).

---
