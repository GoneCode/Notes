### **Deeper Dive into Hash Functions and Collision Handling**

---

### **1. What is a Hash Function?**
A **hash function** maps a key to a unique index in a fixed-size table (hash table). For example:

- Key: `103`
- Hash Function: `hashCode = key % tableSize`
- Index: `3` (if `tableSize = 10`).

**Good Hash Functions**:
- Minimize collisions (when two keys produce the same hash).
- Are fast to compute.
- Distribute keys uniformly across the hash table.

---

### **2. What are Collisions?**
A **collision** occurs when two different keys hash to the same index. For example:

- Keys: `101` and `201`
- Hash Function: `key % 10`
- Both map to index `1`.

---

### **3. Collision Handling Techniques**
There are several strategies to handle collisions:

#### **a. Chaining (Separate Chaining)**
- Each index in the hash table stores a list (or linked list) of key-value pairs.
- If multiple keys hash to the same index, they are added to the list.
- Lookup requires searching within the list.

#### **Implementation Example:**

```java
import java.util.LinkedList;

class HashTableChaining {
    private class Node {
        int key;
        String value;
        Node(int key, String value) {
            this.key = key;
            this.value = value;
        }
    }

    private LinkedList<Node>[] table;
    private int size;

    public HashTableChaining(int size) {
        this.size = size;
        table = new LinkedList[size];
        for (int i = 0; i < size; i++) {
            table[i] = new LinkedList<>();
        }
    }

    private int hashFunction(int key) {
        return key % size;
    }

    public void insert(int key, String value) {
        int index = hashFunction(key);
        for (Node node : table[index]) {
            if (node.key == key) {
                node.value = value; // Update value if key exists
                return;
            }
        }
        table[index].add(new Node(key, value));
    }

    public String search(int key) {
        int index = hashFunction(key);
        for (Node node : table[index]) {
            if (node.key == key) {
                return node.value;
            }
        }
        return null; // Key not found
    }
}

public class Main {
    public static void main(String[] args) {
        HashTableChaining hashTable = new HashTableChaining(10);

        // Insert key-value pairs
        hashTable.insert(101, "Alice");
        hashTable.insert(111, "Bob"); // Collision with key 101
        hashTable.insert(121, "Charlie"); // Collision with key 101 and 111

        // Search keys
        System.out.println("Key 101: " + hashTable.search(101)); // Alice
        System.out.println("Key 111: " + hashTable.search(111)); // Bob
        System.out.println("Key 121: " + hashTable.search(121)); // Charlie
    }
}
```

---

#### **b. Open Addressing**
In this method, all elements are stored within the hash table (no separate lists). When a collision occurs, a probing technique finds the next available slot.

- **Linear Probing**: Search sequentially for the next empty slot.
- **Quadratic Probing**: Use a quadratic function to find the next slot.
- **Double Hashing**: Use a second hash function for resolving collisions.

#### **Implementation Example: Linear Probing**

```java

```

---

### **Comparison of Techniques**:
| **Technique**          | **Advantages**                             | **Disadvantages**                           |
|-------------------------|--------------------------------------------|---------------------------------------------|
| **Chaining**            | Simple to implement, handles collisions well. | Extra memory for linked lists.              |
| **Open Addressing**     | No extra memory, compact storage.           | Performance degrades with high load factor. |

---

Would you like more examples or details about specific probing methods?