### **Hash-Based Search Algorithm in Java**

A **hash-based search** is a technique that leverages **hash tables** or **hash maps** to achieve constant time complexity for lookups in most cases.
It is ideal for searching in scenarios where the data is organized as key-value pairs.

---

### **How it Works**:
1. Data is stored in a hash table or hash map.
2. A **hash function** computes a unique index (hash code) for each key.
3. To search for a key:
   - Compute the hash index using the hash function.
   - Retrieve the value associated with the key directly.

---

### **Advantages**:
- Fast search: \( O(1) \) average case.
- Suitable for large datasets.
- Easy insertion and deletion of key-value pairs.

### **Limitations**:
- Collisions: Two keys may produce the same hash code.
- Requires extra space for the hash table.

---

### **Java Example Using `HashMap`**:
Here’s a real-world example of searching using a hash-based approach.

```java

### **Explanation**:
1. **`HashMap` Structure**:
   - Keys: Student IDs (e.g., 101, 102).
   - Values: Names of students (e.g., "Alice", "Bob").

2. **Search Process**:
   - Use `containsKey()` to check if the key exists in the hash map.
   - Use `get()` to retrieve the value (student name) associated with the key.

3. **Collisions Handling**:
   - Internally, Java’s `HashMap` uses chaining (a linked list or tree at each bucket) to handle collisions efficiently.

---

### **Output**:
For the input `targetId = 103`, the output will be:
```
Student found: Charlie
```

For the input `nonExistentId = 105`, the output will be:
```
Student not found
```

---

### **Key Points**:
- **Time Complexity**:
  - **Search**: \( O(1) \) average case, \( O(n) \) worst case (due to collisions).
  - **Insertion/Deletion**: \( O(1) \) average case.
- **Use Case**: Fast lookup for unique identifiers, like student IDs, usernames, or product codes.
