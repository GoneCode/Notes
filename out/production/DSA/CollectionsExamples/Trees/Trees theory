
    * A tree is a non-linear data structure that organizes data hierarchically

    * Unlike arrays, linked lists, stacks, and queues, which are linear structures, trees allow for a more complex organization of data.

    Key Components of a Tree
    -------------------------

     1.) Node: The basic unit of a tree. Each node contains data and may have links to other nodes.
     2.) Root: The topmost node in a tree. It is the starting point of the tree.
     3.) Edge: A link between two nodes. It represents the relationship between the nodes.
     4.) Child: A node that is directly connected to another node when moving away from the root.
     5.) Parent: A node that has one or more child nodes.
     6.) Leaf: A node that does not have any children. It is also called a terminal node.
     7.) Subtree: A tree formed by a node and its descendants.
     8.) Height: The length of the longest path from the root to a leaf.
     9.) Depth: The length of the path from the root to a particular node.

          A
         / \
        B   C
       / \   \
      D   E   F

    Root---> A
    Children of A ---> B, C
    Parent of B and C ---> A
    Leaf Nodes ---> D, E, F
    Subtree rooted at B ---> B, D, E

        Types of Trees
        ---------------
    1.) Binary Tree: Each node has at most two children, referred to as the left child and the right child.
    2.) Binary Search Tree (BST): A binary tree where the left child contains values less than the parent node, and the right child contains values greater than the parent node.
    3.) AVL Tree: A self-balancing binary search tree where the difference in heights between the left and right subtrees is at most one.
    4.) Heap: A special tree-based data structure that satisfies the heap property. In a max heap, for example, the value of each node is greater than or equal to the values of its children.

    There are several types of binary trees, each with unique properties and use cases. Here are the main types:
    --------------------------------------------------------------------------------------------------------------

    1.) Full (or Strict) Binary Tree

    A full binary tree is a tree in which every node has either 0 or 2 children. No node has only one child.
          A
         / \
        B   C
       / \ / \
      D  E F  G

    2.) Complete Binary Tree

    A complete binary tree is a tree in which all levels are fully filled except possibly the last level, which is filled from left to right.

          A
         / \
        B   C
       / \ /
      D  E F

    3.)  Perfect Binary Tree

    A perfect binary tree is a tree in which all internal nodes have exactly two children and all leaf nodes are at the same level.

          A
         / \
        B   C
       / \ / \
      D  E F  G


    4.) Balanced Binary Tree

    A balanced binary tree is a tree where the height of the left and right subtrees of any node differ by at most one.
     AVL trees and Red-Black trees are examples of balanced binary trees.

          A
         / \
        B   C
       /   / \
      D   E   F

    5.) Degenerate (or Pathological) Tree

    A degenerate tree is a tree where each parent node has only one child. This structure essentially behaves like a linked list.

    A
     \
      B
       \
        C
         \
          D


    6. Binary Search Tree (BST)

    A binary search tree is a binary tree in which for each node,
     the left subtree contains only nodes with values less than the node’s value, and the right subtree contains only nodes with values greater than the node’s value.

           8
          / \
         3   10
        / \    \
       1   6    14
          / \   /
         4   7 13

    Here are some common types of binary search trees:
    ---------------------------------------------------

    1.) Standard Binary Search Tree (BST)

    A standard BST is a binary tree where each node has at most two children.
    For each node, the left subtree contains values less than the node’s value, and the right subtree contains values greater than the node’s value.

          8
         / \
        3   10
       / \    \
      1   6    14
         / \   /
        4   7 13

    2.) Balanced Binary Search Tree
    Balanced BSTs maintain their height to be logarithmic in the number of nodes, ensuring efficient operations.

    AVL Tree: A self-balancing BST where the difference in heights between the left and right subtrees of any node is at most one. Example:

          30
         /  \
       20    40
      /  \     \
     10   25    50

    Red-Black Tree: A self-balancing BST where nodes are colored red or black to ensure the tree remains balanced during insertions and deletions.

          10B
         /   \
       5R     20B
             /  \
           15R  25R


    3.) Complete Binary Search Tree

    A complete BST is a tree where all levels are fully filled except possibly the last level, which is filled from left to right.
          1
         / \
        2   3
       / \  /
      4  5 6

    4.)  Full Binary Search Tree
    A full BST is a tree where every node has either 0 or 2 children. No node has only one child.

          1
         / \
        2   3
       / \ / \
      4  5 6  7


    5.) Perfect Binary Search Tree
    A perfect BST is a tree where all internal nodes have exactly two children, and all leaf nodes are at the same level.
          1
         / \
        2   3
       / \ / \
      4  5 6  7


     Basic Operations
     -----------------

     1.) Insertion: Adding a new node to the tree.
     2.) Deletion: Removing a node from the tree.
     3.) Traversal: Visiting all the nodes in a specific order. Common traversal methods include:
         In-order Traversal: Left, Root, Right
         Pre-order Traversal: Root, Left, Right
         Post-order Traversal: Left, Right, Root








