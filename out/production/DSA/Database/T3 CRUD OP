### **CRUD Operations in SQL**
CRUD stands for **Create, Read, Update, Delete**, which are the basic operations performed on a database. Here's how each operation works in SQL with examples you can run in MySQL Workbench.

---

### **1. CREATE: Insert New Data into a Table**
Use the `INSERT` statement to add records to a table.

#### Example: Creating a Table and Inserting Data
```sql
CREATE TABLE Employees (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50),
    position VARCHAR(50),
    salary DECIMAL(10, 2),
    hire_date DATE
);

-- Insert single row
INSERT INTO Employees (name, position, salary, hire_date)
VALUES ('Alice', 'Developer', 70000.00, '2023-01-01');

-- Insert multiple rows
INSERT INTO Employees (name, position, salary, hire_date)
VALUES
    ('Bob', 'Manager', 90000.00, '2022-05-15'),
    ('Charlie', 'Designer', 50000.00, '2021-10-20');
```

#### Verify the Data
```sql
SELECT * FROM Employees;
```

---

### **2. READ: Retrieve Data from a Table**
Use the `SELECT` statement to retrieve data.

#### Retrieve All Columns
```sql
SELECT * FROM Employees;
```

#### Retrieve Specific Columns
```sql
SELECT name, salary FROM Employees;
```

#### Filter Data Using `WHERE`
```sql
SELECT * FROM Employees WHERE position = 'Developer';
```

#### Sort Data Using `ORDER BY`
```sql
SELECT * FROM Employees ORDER BY salary DESC; -- Highest salary first
```

#### Limit the Number of Results
```sql
SELECT * FROM Employees LIMIT 2; -- Show only the first 2 rows
```

---

### **3. UPDATE: Modify Existing Data**
Use the `UPDATE` statement to change values in existing rows.

#### Example: Update Salary
```sql
UPDATE Employees
SET salary = 75000.00
WHERE name = 'Alice';
```

#### Example: Update Multiple Columns
```sql
UPDATE Employees
SET position = 'Senior Developer', salary = 80000.00
WHERE name = 'Alice';
```

#### Verify the Update
```sql
SELECT * FROM Employees WHERE name = 'Alice';
```

---

### **4. DELETE: Remove Data from a Table**
Use the `DELETE` statement to remove rows from a table.

#### Delete a Specific Row
```sql
DELETE FROM Employees
WHERE name = 'Charlie';
```

#### Delete All Rows (Without Dropping the Table)
```sql
DELETE FROM Employees;
```

#### Verify the Deletion
```sql
SELECT * FROM Employees;
```

---

### **Common CRUD Workflow Example**
Hereâ€™s a sequence combining all CRUD operations:

1. **Create Table and Insert Data:**
   ```sql
   CREATE TABLE Products (
       product_id INT AUTO_INCREMENT PRIMARY KEY,
       product_name VARCHAR(100),
       price DECIMAL(10, 2),
       stock_quantity INT
   );

   INSERT INTO Products (product_name, price, stock_quantity)
   VALUES
       ('Laptop', 75000.00, 50),
       ('Smartphone', 50000.00, 100),
       ('Tablet', 30000.00, 30);
   ```

2. **Read Data:**
   ```sql
   SELECT * FROM Products WHERE price > 40000.00;
   ```

3. **Update Data:**
   ```sql
   UPDATE Products
   SET stock_quantity = stock_quantity - 5
   WHERE product_name = 'Laptop';
   ```

4. **Delete Data:**
   ```sql
   DELETE FROM Products
   WHERE product_name = 'Tablet';
   ```

---

### **Best Practices**
1. **Backup Your Data** before performing `DELETE` or `UPDATE`.
2. Use `WHERE` clauses carefully to avoid affecting unintended rows.
3. Test queries on a small dataset first, especially `UPDATE` and `DELETE`.

Would you like more detailed examples or practice problems?