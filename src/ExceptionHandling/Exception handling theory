What is Exception Handling?
Exception Handling in Java is a mechanism to handle runtime errors, so the normal flow of the application can be maintained.
An exception is an event that disrupts the normal flow of the program.

Diagram of Exception Hierarchy
--------------------------------
                Throwable
                   ├── Error
                   │    ├── OutOfMemoryError
                   │    └── StackOverflowError
                   └── Exception
                        ├── RuntimeException
                        │    ├── NullPointerException
                        │    ├── ArrayIndexOutOfBoundsException
                        │    └── ArithmeticException
                        └── Checked Exceptions
                             ├── IOException
                             ├── SQLException
                             └── ClassNotFoundException


Key Concepts
1.) Exception:
    An exception is an unwanted or unexpected event that occurs during the execution of a program, disrupting its normal flow.

2.) Types of Exceptions:
    Checked Exceptions: These are exceptions that are checked at compile-time. For example, IOException, SQLException.
    Unchecked Exceptions: These are exceptions that are not checked at compile-time. For example, ArithmeticException, NullPointerException.

3.) Try-Catch Block:
        The try block contains the code that might throw an exception.
        The catch block contains the code to handle the exception.
        eg:
            try {
                int data = 50 / 0; // This will throw ArithmeticException
            } catch (ArithmeticException e) {
                System.out.println("Cannot divide by zero");
            }

4.) Finally Block:
   The finally block contains code that is always executed, whether an exception is handled or not.
   eg:
       try {
           int data = 50 / 0;
       } catch (ArithmeticException e) {
           System.out.println("Cannot divide by zero");
       } finally {
           System.out.println("Finally block is always executed");
       }

5.) Throw Keyword:
    The throw keyword is used to explicitly throw an exception.
    eg:
        public void checkAge(int age) {
            if (age < 18) {
                throw new ArithmeticException("Not eligible to vote");
            } else {
                System.out.println("Eligible to vote");
            }
        }

6.) Throws Keyword:
    The throws keyword is used in the method signature to declare an exception.
    eg:
        public void readFile() throws IOException {
            FileReader file = new FileReader("file.txt");
            BufferedReader fileInput = new BufferedReader(file);
            throw new IOException();
        }


