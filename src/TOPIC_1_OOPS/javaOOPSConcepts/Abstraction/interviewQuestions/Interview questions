### **Answers to Java Abstract Class Interview Questions**

---

### **Basic Interview Questions**

1. **What is an abstract class in Java?**\
   An abstract class in Java is a class that cannot be instantiated and is declared using the `abstract` keyword. It can have abstract methods (without implementation) as well as concrete methods (with implementation). Subclasses must provide implementations for all abstract methods.

2. **What is the purpose of using abstract classes?**\
   Abstract classes are used to achieve **partial abstraction** and provide a blueprint for subclasses. They allow sharing common behavior across subclasses while forcing certain methods to be implemented in child classes.

3. **Can an abstract class have constructors in Java? If yes, why?**\
   Yes, an abstract class can have constructors. The constructors are called when a concrete subclass is instantiated, helping initialize fields of the abstract class.

4. **Can you create an object of an abstract class? Why or why not?**\
   No, you cannot create an object of an abstract class because it is incomplete and may contain abstract methods without implementations.

5. **What is the difference between an abstract class and an interface in Java?**

   - **Abstract Class**: Can have abstract and concrete methods, constructors, and instance variables. It allows partial abstraction.
   - **Interface**: Before Java 8, it could only contain abstract methods. From Java 8, it can have default and static methods. It allows full abstraction.

6. **Can an abstract class have both abstract and concrete methods?**\
   Yes, an abstract class can have both abstract (without implementation) and concrete methods (with implementation).

7. **Can an abstract class be final in Java? Why or why not?**\
   No, an abstract class cannot be `final` because a `final` class cannot be extended, and abstract classes are meant to be subclassed.

8. **Can abstract methods be static in Java?**\
   No, abstract methods cannot be static because static methods are associated with the class, while abstract methods are meant to be implemented by subclasses.

9. **What happens if you declare an abstract method in a class but forget to make the class abstract?**\
   The compiler will throw an error, as a class with abstract methods must be declared abstract.

10. **Is it mandatory to override all abstract methods in the subclass?**\
    Yes, unless the subclass itself is declared abstract. If the subclass is not abstract, it must implement all abstract methods.

11. **Can an abstract class implement an interface? If yes, how?**\
    Yes, an abstract class can implement an interface. It does not need to provide implementations for all interface methods; subclasses can implement the remaining methods.

12. **Can an interface extend an abstract class?**\
    No, an interface cannot extend an abstract class. Interfaces can only extend other interfaces.

---

### **Intermediate-Level Questions**

13. **Can you have a main method in an abstract class? Explain with an example.**\
    Yes, an abstract class can have a main method. The main method can be used to run code for testing purposes.

    ```java
    abstract class Test {
        public static void main(String[] args) {
            System.out.println("Abstract class main method");
        }
    }
    ```

14. **If an abstract class has a constructor, when is it called?**\
    The constructor of an abstract class is called when a concrete subclass is instantiated. The superclass constructor is called first, and then the subclass constructor executes.

15. **Can you declare an abstract method as ********`private`******** or ********`protected`********?**

    - **Private**: No, because private methods are not visible to subclasses.
    - **Protected**: Yes, an abstract method can be declared as `protected`.

16. **What is the default access modifier of an abstract method?**\
    The default access modifier for an abstract method is `default` (package-private).

17. **How does an abstract class differ from a regular class?**\
    An abstract class cannot be instantiated and may contain abstract methods, while a regular class can be instantiated and must have concrete methods.

18. **Explain an example where using an abstract class is more appropriate than an interface.**\
    If you have shared code or fields among multiple subclasses, an abstract class is more appropriate as it allows concrete methods and instance variables.

19. **Can an abstract class contain instance variables? If yes, how are they used?**\
    Yes, abstract classes can contain instance variables, and they are initialized through constructors in subclasses.

20. **How does method overriding work with abstract classes?**\
    Subclasses override abstract methods from an abstract class to provide implementations. This is a form of runtime polymorphism.

21. **What happens when a subclass does not implement all the abstract methods?**\
    If a subclass does not implement all abstract methods, it must itself be declared abstract.

22. **Can an abstract class extend another abstract class? If yes, what happens?**\
    Yes, an abstract class can extend another abstract class. The subclass can inherit and declare additional abstract methods.

23. **How are abstract classes related to polymorphism?**\
    Abstract classes enable runtime polymorphism by allowing references of the abstract class type to point to objects of concrete subclasses.

24. **Why can't abstract methods be marked ********`static`******** or ********`final`********?**

    - **Static**: Static methods are associated with the class, not an instance, while abstract methods depend on subclasses.
    - **Final**: Final methods cannot be overridden, which contradicts the purpose of abstract methods.

25. **Can an abstract class have a static method? Why?**\
    Yes, an abstract class can have static methods because static methods belong to the class and are not tied to object instances.

---

### **Scenario-Based Questions**

26. **Write a program to demonstrate an abstract class with abstract and non-abstract methods.**

    ```java
    abstract class Shape {
        abstract void draw();
        void display() {
            System.out.println("This is a shape.");
        }
    }
    class Circle extends Shape {
        void draw() {
            System.out.println("Drawing a circle.");
        }
    }
    public class Main {
        public static void main(String[] args) {
            Shape s = new Circle();
            s.draw();
            s.display();
        }
    }
    ```

27. **Write an example where an abstract class constructor initializes certain fields, and the subclass inherits these fields.**

    ```java
    abstract class Vehicle {
        String brand;
        Vehicle(String brand) {
            this.brand = brand;
        }
    }
    class Car extends Vehicle {
        Car(String brand) {
            super(brand);
        }
        void display() {
            System.out.println("Car brand: " + brand);
        }
    }
    public class Main {
        public static void main(String[] args) {
            Car car = new Car("Toyota");
            car.display();
        }
    }
    ```

28. **Can an abstract class have no abstract methods? Explain with an example.**\
    Yes, an abstract class can have no abstract methods. Such a class is declared abstract to prevent direct instantiation.

    ```java
    abstract class Base {
        void show() {
            System.out.println("Concrete method in abstract class");
        }
    }
    class Derived extends Base {}
    public class Main {
        public static void main(String[] args) {
            Base obj = new Derived();
            obj.show();
        }
    }
    ```

---

Advanced-Level Questions

29.) Explain the role of abstract classes in achieving partial abstraction in Java?
Abstract classes allow partial abstraction because they can have both abstract methods (which provide no implementation) and concrete methods (with implementation).

30.) How is an abstract class used in conjunction with design patterns like Factory Pattern or Template Method?
In the Factory Pattern, an abstract class can define the common behavior for multiple subclasses that create objects. In the Template Method Pattern, an abstract class provides a skeleton of the algorithm and delegates steps to subclasses.

31.) Discuss a situation where an abstract class leads to better design than an interface?
If you need to provide shared functionality or fields, abstract classes are better because interfaces cannot have instance variables and constructors.





