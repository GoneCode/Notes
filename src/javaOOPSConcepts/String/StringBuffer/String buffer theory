StringBuffer in Java
The StringBuffer class in Java is used to create mutable (modifiable) strings.
Unlike the String class, which creates immutable strings, StringBuffer allows you to modify the content of the string without creating a new object.

Key Features:
-------------
1.) Mutability:
StringBuffer objects can be modified after they are created.
This makes it more efficient for operations that require frequent modifications to the string content.

2.) Thread-Safety:
StringBuffer is synchronized, which means it is thread-safe.
 Multiple threads can access a StringBuffer object without causing data inconsistency.

3.) Performance:
While StringBuffer is thread-safe, it may be slower than StringBuilder (another mutable string class) due to the overhead of synchronization.
 Use StringBuffer when thread safety is required.


Common Methods:
----------------
1.) append():
    Adds the specified string to the end of the current string.
    eg:
    StringBuffer sb = new StringBuffer("Hello");
    sb.append(" World");
    System.out.println(sb); // Output: Hello World

2.) insert():
    Inserts the specified string at the specified position.
    eg:
    StringBuffer sb = new StringBuffer("Hello");
    sb.insert(5, " World");
    System.out.println(sb); // Output: Hello World

3.) replace():
    Replaces the characters in a substring of this sequence with characters in the specified string.
    eg:
    StringBuffer sb = new StringBuffer("Hello World");
    sb.replace(6, 11, "Java");
    System.out.println(sb); // Output: Hello Java

4.) delete():
    Removes the characters in a substring of this sequence.
    eg:
    StringBuffer sb = new StringBuffer("Hello World");
    sb.delete(5, 11);
    System.out.println(sb); // Output: Hello

5.) reverse():
    Reverses the sequence of characters in this string buffer.
    eg:
    StringBuffer sb = new StringBuffer("Hello");
    sb.reverse();
    System.out.println(sb); // Output: olleH

6.) capacity():
    Returns the current capacity of the string buffer.
    eg:
    StringBuffer sb = new StringBuffer();
    System.out.println(sb.capacity()); // Default capacity is 16

7.) ensureCapacity():
    Ensures that the capacity is at least equal to the specified minimum.
    eg:
    StringBuffer sb = new StringBuffer();
    sb.ensureCapacity(50);
    System.out.println(sb.capacity()); // Output: 50






