The **Best Time to Buy and Sell Stock** problem is another popular coding problem, commonly seen on LeetCode. Let me break it down step by step.

---

### **Problem Description**
You are given an array `prices` where `prices[i]` represents the price of a given stock on day `i`.

You want to maximize your profit by choosing **a single day to buy** one stock and **a different day in the future to sell** it.

Return the **maximum profit** you can achieve. If no profit can be achieved, return `0`.

---

### **Example**

#### Input:
```plaintext
prices = [7, 1, 5, 3, 6, 4]
```

#### Output:
```plaintext
5
```

#### Explanation:
- Buy on day `1` (price = 1) and sell on day `4` (price = 6).
- Profit = `6 - 1 = 5`.

---

### **Constraints**
1. You can only complete one transaction (buy once and sell once).
2. You cannot sell a stock before you buy it.

---

### **Approach 1: Brute Force**

#### Steps:
1. Use two nested loops to consider every pair of days `(i, j)` where `i < j`.
2. Calculate the profit as `prices[j] - prices[i]`.
3. Keep track of the maximum profit found.

#### Code:
```java
public int maxProfit(int[] prices) {
    int maxProfit = 0;
    for (int i = 0; i < prices.length; i++) {
        for (int j = i + 1; j < prices.length; j++) {
            int profit = prices[j] - prices[i];
            if (profit > maxProfit) {
                maxProfit = profit;
            }
        }
    }
    return maxProfit;
}
```

#### Time Complexity:
- **O(nÂ²)**: Two nested loops.
- Space Complexity: **O(1)**.

---

### **Approach 2: One Pass (Optimal Solution)**

#### Steps:
1. Track the **minimum price** (`minPrice`) seen so far as you iterate through the array.
2. Calculate the potential profit for each day as `prices[i] - minPrice`.
3. Update the `maxProfit` whenever the potential profit is greater than the current `maxProfit`.

#### Code:
```java
public int maxProfit(int[] prices) {
    int minPrice = Integer.MAX_VALUE;
    int maxProfit = 0;

    for (int price : prices) {
        if (price < minPrice) {
            minPrice = price; // Update the minimum price
        } else {
            maxProfit = Math.max(maxProfit, price - minPrice); // Calculate profit
        }
    }
    return maxProfit;
}
```

#### Explanation:
- If `prices = [7, 1, 5, 3, 6, 4]`:
  - `minPrice` starts as `Integer.MAX_VALUE`.
  - Iteration:
    - Day 0: `price = 7`. Update `minPrice = 7`.
    - Day 1: `price = 1`. Update `minPrice = 1`.
    - Day 2: `price = 5`. Profit = `5 - 1 = 4`. Update `maxProfit = 4`.
    - Day 3: `price = 3`. Profit = `3 - 1 = 2`. No change.
    - Day 4: `price = 6`. Profit = `6 - 1 = 5`. Update `maxProfit = 5`.
    - Day 5: `price = 4`. Profit = `4 - 1 = 3`. No change.
  - Final `maxProfit = 5`.

#### Time Complexity:
- **O(n)**: Single loop through the array.
- Space Complexity: **O(1)**.

---

### **Key Insights**
1. The goal is to track the minimum price so far and calculate the profit relative to that.
2. This approach ensures an efficient solution with only one pass through the array.
3. Return `0` if no profit is possible (e.g., prices are decreasing).

---

Would you like a deeper dive into variations of this problem or help with implementing it in a specific way?