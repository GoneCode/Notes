The **Move Zeros** problem is a classic array manipulation question often seen in coding interviews. Here's a detailed explanation:

---

### **Problem Description**
Given an integer array `nums`, move all `0`s to the end of the array while maintaining the **relative order** of the non-zero elements.

You must do this **in-place** (without using extra space for another array).

---

### **Example**

#### Input:
```plaintext
nums = [0, 1, 0, 3, 12]
```

#### Output:
```plaintext
[1, 3, 12, 0, 0]
```

#### Explanation:
- The non-zero elements `[1, 3, 12]` are kept in their original relative order.
- All the zeros are moved to the end.

---

### **Approach 1: Two-Pointer Method (Optimal Solution)**

#### Steps:
1. Use two pointers:
   - **Pointer `i`**: Tracks the position to place the next non-zero element.
   - **Pointer `j`**: Iterates through the array.
2. Traverse the array with `j`:
   - If `nums[j]` is non-zero, swap `nums[i]` and `nums[j]`, then increment `i`.
3. After the loop, all non-zero elements are shifted to the front, and zeros are implicitly moved to the end.

#### Code:
```java
public void moveZeroes(int[] nums) {
    int i = 0; // Pointer for the next non-zero position

    // Move non-zero elements forward
    for (int j = 0; j < nums.length; j++) {
        if (nums[j] != 0) {
            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
            i++;
        }
    }
}
```

#### Explanation:
- If `nums = [0, 1, 0, 3, 12]`:
  - `j = 0`: `nums[0] = 0`, no swap, `i = 0`.
  - `j = 1`: `nums[1] = 1`, swap `nums[0]` and `nums[1]`, `nums = [1, 0, 0, 3, 12]`, `i = 1`.
  - `j = 2`: `nums[2] = 0`, no swap, `i = 1`.
  - `j = 3`: `nums[3] = 3`, swap `nums[1]` and `nums[3]`, `nums = [1, 3, 0, 0, 12]`, `i = 2`.
  - `j = 4`: `nums[4] = 12`, swap `nums[2]` and `nums[4]`, `nums = [1, 3, 12, 0, 0]`, `i = 3`.

#### Time Complexity:
- **O(n)**: Single traversal of the array.
- Space Complexity: **O(1)**: No additional space used.

---

### **Approach 2: Fill Non-Zero Elements and Add Zeros**

#### Steps:
1. Traverse the array and copy all non-zero elements to the front.
2. After placing all non-zero elements, fill the remaining positions with zeros.

#### Code:
```java
public void moveZeroes(int[] nums) {
    int i = 0; // Pointer for placing non-zero elements

    // Place all non-zero elements at the front
    for (int num : nums) {
        if (num != 0) {
            nums[i++] = num;
        }
    }

    // Fill the remaining array with zeros
    while (i < nums.length) {
        nums[i++] = 0;
    }
}
```

#### Explanation:
- If `nums = [0, 1, 0, 3, 12]`:
  - First loop moves `[1, 3, 12]` to the front: `nums = [1, 3, 12, 3, 12]`.
  - Second loop fills the rest with zeros: `nums = [1, 3, 12, 0, 0]`.

#### Time Complexity:
- **O(n)**: Two passes through the array.
- Space Complexity: **O(1)**.

---

### **Approach 3: Using a Queue (Not In-Place)**

#### Steps:
1. Use a list or queue to collect all non-zero elements.
2. Copy the elements back to the array, followed by zeros.

#### Code:
```java
public void moveZeroes(int[] nums) {
    List<Integer> nonZeroElements = new ArrayList<>();

    // Collect all non-zero elements
    for (int num : nums) {
        if (num != 0) {
            nonZeroElements.add(num);
        }
    }

    // Place non-zero elements
    int i = 0;
    for (int num : nonZeroElements) {
        nums[i++] = num;
    }

    // Fill the rest with zeros
    while (i < nums.length) {
        nums[i++] = 0;
    }
}
```

#### Time Complexity:
- **O(n)**: Collecting and copying elements.
- Space Complexity: **O(n)**: Extra list used.

---

### **Key Insights**
1. The **two-pointer approach** is the most efficient in terms of both time and space complexity.
2. Edge cases to consider:
   - Array with no zeros (`nums = [1, 2, 3]`).
   - Array with only zeros (`nums = [0, 0, 0]`).
   - Empty array (`nums = []`).
3. Avoid creating extra arrays or lists for in-place problems.

---

Would you like more help with debugging or variations of this problem?