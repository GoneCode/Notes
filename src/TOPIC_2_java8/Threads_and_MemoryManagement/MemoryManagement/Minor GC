### **What is Minor GC in Java?**

A **Minor GC (Minor Garbage Collection)** refers to the process of collecting garbage in the **Young Generation** of the heap memory in Java.
It focuses on reclaiming memory occupied by short-lived objects, which are frequently created and discarded.

---

### **How Minor GC Works**
1. **Young Generation Structure**:
   - The Young Generation is divided into:
     - **Eden Space**: New objects are allocated here.
     - **Survivor Spaces (S0 and S1)**: Objects that survive a Minor GC are moved here.

2. **Process**:
   - When the **Eden Space** fills up, a Minor GC is triggered.
   - The garbage collector:
     1. Identifies **live objects** (those still referenced).
     2. Moves live objects from Eden to one of the **Survivor Spaces**.
     3. Clears the memory of unreachable objects in the Eden Space.
   - Objects in a Survivor Space may eventually move to the **Old Generation** if they survive multiple Minor GCs (based on their age).

3. **Promotion to Old Generation**:
   - An object that survives a configurable number of Minor GCs is promoted to the Old Generation (tenuring process).
   - The threshold for promotion is controlled by the **MaxTenuringThreshold** JVM parameter.

---

### **Key Characteristics of Minor GC**
1. **Stop-the-World Event**:
   - Minor GC involves a **stop-the-world pause**, during which all application threads are halted.
   - The pause is generally short because the Young Generation is small.

2. **Frequency**:
   - Minor GCs occur more frequently than Major GCs because the Young Generation fills up faster.

3. **Impact on Performance**:
   - Minor GC is optimized for speed since most objects in the Young Generation are short-lived and quickly discarded.

4. **Memory Compaction**:
   - During Minor GC, memory in the Young Generation is compacted to eliminate fragmentation.

---

### **Minor GC Parameters**
- **JVM Options** to tune Young Generation and Minor GC:
  - `-Xms` and `-Xmx`: Set initial and maximum heap size.
  - `-Xmn`: Set the size of the Young Generation.
  - `-XX:SurvivorRatio`: Adjust the size ratio between Eden and Survivor Spaces.
  - `-XX:MaxTenuringThreshold`: Set the number of GCs an object must survive before being promoted.

---

### **Example Scenario**
```java
public class MinorGCExample {
    public static void main(String[] args) {
        for (int i = 0; i < 100000; i++) {
            String str = new String("Temporary Object " + i);
        }
    }
}
```

- In this example, many short-lived objects are created in the **Eden Space**.
- As the Eden Space fills up, Minor GC is triggered, reclaiming memory by discarding objects no longer referenced.

---

### **Summary of Minor GC**
- **Purpose**: Reclaims memory in the Young Generation.
- **Frequency**: Happens often because of rapid allocation in the Eden Space.
- **Pause Time**: Short, optimized for speed.
- **Promotion**: Surviving objects may be moved to the Old Generation.
- **Impact**: Affects performance minimally if properly tuned.

Let me know if you'd like to explore GC tuning or see detailed logs of Minor GC operations!