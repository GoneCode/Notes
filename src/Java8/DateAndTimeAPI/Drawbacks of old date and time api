The old date and time API in Java, primarily represented by java.util.Date and java.util.Calendar, had several drawbacks that made it cumbersome and error-prone to use. Here are some of the key issues:

1. Mutability
Problem: java.util.Date and java.util.Calendar are mutable, meaning their values can be changed after they are created.
Impact: This can lead to unexpected behavior, especially in multi-threaded environments where shared instances might be modified concurrently.

2. Poor Design
Problem: The design of the old API was not intuitive. For example, the Date class encapsulates both date and time, which can be confusing.
Impact: This often led to mistakes and required additional effort to correctly handle dates and times.

3. Lack of Thread Safety
Problem: The old API classes are not thread-safe.
Impact: Developers had to implement their own synchronization mechanisms to safely use these classes in multi-threaded applications.

4. Inconsistent and Confusing
Problem: The Date class uses a zero-based index for months (January is 0, December is 11), which is not intuitive.
Impact: This often resulted in off-by-one errors and required developers to remember these quirks.

5. Limited Functionality
Problem: The old API lacked many features such as proper time zone support, date arithmetic, and formatting/parsing utilities.
Impact: Developers often had to rely on external libraries like Joda-Time to perform common date and time operations.

6. Poor Performance
Problem: The old API had performance issues, especially when performing date/time calculations or formatting/parsing operations.
Impact: This could lead to inefficient code and slower applications.

7. Inflexibility
Problem: The old API did not provide convenient methods for manipulating dates and times, such as adding or subtracting days.
Impact: This made it cumbersome to perform even simple date and time operations.