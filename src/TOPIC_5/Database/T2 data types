### **SQL Data Types**
SQL data types specify what kind of data can be stored in a table column. They fall into three primary categories:

1. **Numeric Data Types**
2. **javaOOPSConcepts.String (Character) Data Types**
3. **Date and Time Data Types**

Below is a detailed explanation with examples.

---

### **1. Numeric Data Types**
Numeric data types store numbers, including integers and floating-point numbers.

| Data Type        | Description                                  | Example Values   |
|-------------------|----------------------------------------------|------------------|
| **INT**          | Whole numbers                               | 1, 20, -100      |
| **BIGINT**       | Large whole numbers                         | 9223372036854775807 |
| **DECIMAL(p, s)**| Fixed-point numbers with precision and scale | 123.45 (p=5, s=2) |
| **FLOAT**        | Approximate floating-point numbers          | 3.14159          |
| **TINYINT**      | Small integers (1 byte)                     | 0 to 255         |

#### Example
```sql
CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(50),
    price DECIMAL(10, 2), -- up to 10 digits, 2 after decimal
    stock_quantity INT
);

INSERT INTO Products (product_id, product_name, price, stock_quantity)
VALUES (1, 'Laptop', 75000.50, 100);
```

---

### **2. javaOOPSConcepts.String (Character) Data Types**
javaOOPSConcepts.String data types store text or binary data.

| Data Type        | Description                                       | Example Values          |
|-------------------|---------------------------------------------------|-------------------------|
| **CHAR(n)**       | Fixed-length string of `n` characters            | 'ABC' (n=3)             |
| **VARCHAR(n)**    | Variable-length string up to `n` characters       | 'Hello World'           |
| **TEXT**          | Large text data                                  | Articles, Descriptions  |
| **BLOB**          | Binary data (e.g., images, files)                | Binary data             |

#### Example
```sql
CREATE TABLE Employees (
    employee_id INT PRIMARY KEY,
    name VARCHAR(100),
    address TEXT
);

INSERT INTO Employees (employee_id, name, address)
VALUES (1, 'Alice', '123 Main Street, City, Country');
```

---

### **3. Date and Time Data Types**
Date and time data types store dates, times, or both.

| Data Type        | Description                   | Example Values        |
|-------------------|-------------------------------|-----------------------|
| **DATE**         | Stores a date (YYYY-MM-DD)   | '2024-01-01'          |
| **TIME**         | Stores time (HH:MM:SS)       | '14:30:00'            |
| **DATETIME**     | Stores date and time         | '2024-01-01 14:30:00' |
| **TIMESTAMP**    | Stores date/time with time zone | '2024-01-01 14:30:00'|
| **YEAR**         | Stores a year (4 digits)     | '2024'                |

#### Example
```sql
CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    order_date DATE,
    delivery_time TIME,
    order_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO Orders (order_id, order_date, delivery_time)
VALUES (1, '2024-01-01', '14:30:00');
```

---

### **4. Other Useful Data Types**
| Data Type        | Description                          | Example Values       |
|-------------------|--------------------------------------|----------------------|
| **BOOLEAN**       | Stores `TRUE` or `FALSE` (1 or 0)   | TRUE, FALSE          |
| **ENUM**          | Stores one value from a predefined set | 'Small', 'Medium' |
| **SET**           | Stores multiple values from a predefined set | 'A,B'            |

#### Example
```sql
CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(50),
    size ENUM('Small', 'Medium', 'Large')
);

INSERT INTO Products (product_id, product_name, size)
VALUES (1, 'T-Shirt', 'Medium');
```

---

### **How to Practice in MySQL Workbench**
1. **Create Tables:** Use the examples above to create tables with different data types.
2. **Insert Data:** Test inserting different types of data to see how the database handles them.
3. **Query Data:** Use `SELECT` to retrieve and display stored data.

Would you like to explore more advanced data types or examples?